<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Asynchronous Javascript</title>
</head>
<body>
    <h1><center>Asynchronous Javascript</center></h1>
    <br><br>
    <ul>
        <li>Asynchronous JavaScript allows multiple tasks to run concurrently without blocking the main thread. This keeps the application responsive.</li>
        <li>Asynchronous JavaScript is often used for tasks like network requests (e.g., fetch), timers (e.g., setTimeout), and reading files.</li>
        <li><b>Callbacks: </b> The earliest form of handling asynchronous code, where a function is passed as an argument to another function to be executed later.</li>
        <li><b>Callback Hell: </b> Nested callbacks can lead to difficult-to-read and maintain code, known as "callback hell."</li>
        <li><b>Promises: </b> Promises provide a cleaner way to handle asynchronous operations, representing a value that may be available now, in the future, or never.</li>
        <li><b>async/await: </b> A more readable syntax for working with promises, allowing asynchronous code to look and behave like synchronous code.</li>
    </ul>

    <script src="index.js"></script>
</body>
</html>